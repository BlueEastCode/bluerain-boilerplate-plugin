{"version":3,"sources":["../../blueeast/bluerain-cli/packages/web/src/config/utils/envVars.js"],"names":["string","number","bool","registerEnvFile","DEPLOYMENT","process","env","envFile","envFileResolutionOrder","path","resolve","projectRootDir","envFilePath","find","filePath","fs","existsSync","title","level","message","dotenv","config","name","defaultVal","parseInt"],"mappings":";;;;;QAkEgBA,M,GAAAA,M;QAYAC,M,GAAAA,M;QAIAC,I,GAAAA,I;;AA1EhB;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AAEA;;;;AACA;;;;AAEA;;AAEA,SAASC,eAAT,GAA2B;AACzB,QAAMC,aAAaC,QAAQC,GAAR,CAAYF,UAA/B;AACA,QAAMG,UAAU,MAAhB;;AAEA;AACA;AACA,QAAMC,yBAAyB,yBAAU;AACvC;AACA;AACA;AACAC,iBAAKC,OAAL,CAAaC,wBAAb,EAA6BJ,OAA7B,CAJuC;AAKvC;AACA;AACA;AACA,wBAAOH,UAAP,EAAmBK,eAAKC,OAAL,CAAaC,wBAAb,EAA8B,GAAEJ,OAAQ,IAAGH,UAAW,EAAtD,CAAnB,CARuC,CAAV,CAA/B;;AAWA;AACA,QAAMQ,cAAcJ,uBAAuBK,IAAvB,CAA4BC,YAAYC,aAAGC,UAAH,CAAcF,QAAd,CAAxC,CAApB;;AAEA;AACA,MAAIF,WAAJ,EAAiB;AACf;AACA,oBAAI;AACFK,aAAO,QADL;AAEFC,aAAO,SAFL;AAGFC,eAAU,2CAA0CP,WAAY;AAH9D,KAAJ;AAKAQ,qBAAOC,MAAP,CAAc,EAAEZ,MAAMG,WAAR,EAAd;AACD;AACF;;AAED;AACA;AArDA;;;;;;;;AAsDAT;;AAEA;;AAEA;;;;;;;;AAQO,SAASH,MAAT,CAAgBsB,IAAhB,EAAsBC,UAAtB,EAAkC;AACvC,SAAOlB,QAAQC,GAAR,CAAYgB,IAAZ,KAAqBC,UAA5B;AACD;;AAED;;;;;;;;AAQO,SAAStB,MAAT,CAAgBqB,IAAhB,EAAsBC,UAAtB,EAAkC;AACvC,SAAOlB,QAAQC,GAAR,CAAYgB,IAAZ,IAAoBE,SAASnB,QAAQC,GAAR,CAAYgB,IAAZ,CAAT,EAA4B,EAA5B,CAApB,GAAsDC,UAA7D;AACD;;AAEM,SAASrB,IAAT,CAAcoB,IAAd,EAAoBC,UAApB,EAAgC;AACrC,SAAOlB,QAAQC,GAAR,CAAYgB,IAAZ,IAAoBjB,QAAQC,GAAR,CAAYgB,IAAZ,MAAsB,MAAtB,IAAgCjB,QAAQC,GAAR,CAAYgB,IAAZ,MAAsB,GAA1E,GAAgFC,UAAvF;AACD","file":"envVars.js","sourceRoot":"/home/nasir/github-nasir/bluerain-boilerplate-plugin","sourcesContent":["/**\n * Helper for resolving environment specific configuration files.\n *\n * It resolves .env files that are supported by the `dotenv` library.\n *\n * Please read the application configuration docs for more info.\n */\n\nimport dotenv from 'dotenv';\nimport fs from 'fs';\nimport path from 'path';\n\nimport ifElse from '../../shared/utils/logic/ifElse';\nimport removeNil from '../../shared/utils/arrays/removeNil';\n\nimport projectRootDir from '../projectRootDir';\nimport { log } from '../../internal/utils';\n\n// PRIVATES\n\nfunction registerEnvFile() {\n  const DEPLOYMENT = process.env.DEPLOYMENT;\n  const envFile = '.env';\n\n  // This is the order in which we will try to resolve an environment configuration\n  // file.\n  const envFileResolutionOrder = removeNil([\n    // Is there an environment config file at the app root?\n    // This always takes preference.\n    // e.g. /projects/react-universally/.env\n    path.resolve(projectRootDir, envFile),\n    // Is there an environment config file at the app root for our target\n    // environment name?\n    // e.g. /projects/react-universally/.env.staging\n    ifElse(DEPLOYMENT)(path.resolve(projectRootDir, `${envFile}.${DEPLOYMENT}`)),\n  ]);\n\n  // Find the first env file path match.\n  const envFilePath = envFileResolutionOrder.find(filePath => fs.existsSync(filePath));\n\n  // If we found an env file match the register it.\n  if (envFilePath) {\n    // eslint-disable-next-line no-console\n    log({\n      title: 'server',\n      level: 'special',\n      message: `Registering environment variables from: ${envFilePath}`,\n    });\n    dotenv.config({ path: envFilePath });\n  }\n}\n\n// Ensure that we first register any environment variables from an existing\n// env file.\nregisterEnvFile();\n\n// EXPORTED HELPERS\n\n/**\n * Gets a string environment variable by the given name.\n *\n * @param  {String} name - The name of the environment variable.\n * @param  {String} defaultVal - The default value to use.\n *\n * @return {String} The value.\n */\nexport function string(name, defaultVal) {\n  return process.env[name] || defaultVal;\n}\n\n/**\n * Gets a number environment variable by the given name.\n *\n * @param  {String} name - The name of the environment variable.\n * @param  {number} defaultVal - The default value to use.\n *\n * @return {number} The value.\n */\nexport function number(name, defaultVal) {\n  return process.env[name] ? parseInt(process.env[name], 10) : defaultVal;\n}\n\nexport function bool(name, defaultVal) {\n  return process.env[name] ? process.env[name] === 'true' || process.env[name] === '1' : defaultVal;\n}\n"]}